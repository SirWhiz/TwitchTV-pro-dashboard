{"version":3,"sources":["components/GameCard.js","api.js","components/Games.js","components/PopularStreamCard.js","components/Streams.js","components/StreamCard.js","components/GameStreams.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","game","this","className","style","marginBottom","Card","CardActionArea","CardMedia","height","paddingTop","image","box_art_url","title","name","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","size","color","to","pathname","state","gameID","id","React","Component","api","axios","create","headers","Games","useState","games","setGames","useEffect","a","get","result","dataArray","data","finalArray","map","newURL","replace","fetchData","length","CircularProgress","key","PopularStreamCard","channel","thumbnail_url","user_name","gameName","viewer_count","Streams","channels","setChannels","gameIDs","streams","game_id","queryParams","finalURL","gameNames","gameNameArray","stream","StreamCard","toLocaleString","GameStreams","match","location","streamData","setStreamData","viewers","setViewers","totalViewers","reduce","acc","val","params","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","Header","classes","AppBar","Toolbar","noWrap","button","App","exact","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbbb9360.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass GameCard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        var game = this.props.game;\r\n\r\n        return(\r\n            <div className=\"col-md-3\" style={{ marginBottom:'1em' }}>\r\n                <Card>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            style = {{ height: 0, paddingTop: '56%'}}\r\n                            image={game.box_art_url}\r\n                            title={game.name}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {game.name}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\">\r\n                            <Link\r\n                                className=\"card-link\" \r\n                                to={{\r\n                                    pathname: \"games/\" + game.name,\r\n                                    state: {\r\n                                        gameID: game.id\r\n                                    }\r\n                                }} \r\n                            >\r\n                                <span className=\"game-button-name\">{game.name} streams</span>\r\n                            </Link>\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default GameCard;","import axios from 'axios';\r\n\r\nlet api = axios.create({\r\n    headers: {\r\n        'Client-ID': 'd2f0jy0xnzkliwtggzo5u9nr4p3s5m'\r\n    }\r\n});\r\n\r\nexport default api;","import React, {useState, useEffect} from 'react';\r\nimport GameCard from './GameCard';\r\nimport api from '../api';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Games(){\r\n    const [games, setGames] = useState([]);\r\n\r\n    //Similar to componentDidMount but using React Hooks\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await api.get('https://api.twitch.tv/helix/games/top');\r\n            let dataArray = result.data.data;\r\n            let finalArray = dataArray.map(game => {\r\n                let newURL = game.box_art_url.replace('{width}', '500').replace('{height}', '500');\r\n                game.box_art_url = newURL;\r\n                return game;\r\n            })\r\n            setGames(finalArray);\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    //If the data has not yet been fetched, we show a loading spinner\r\n    if(games.length === 0){\r\n        return (\r\n            <div>\r\n                <h1 className=\"games-header\">Most watched games right now</h1>\r\n                <div className=\"spinner\">\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div>\r\n                <h1 className=\"games-header\">Most watched games right now</h1>\r\n                <div className=\"row p-5\">\r\n                    {games.map(game => (\r\n                        <GameCard key={game.id} game={game} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Games;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass PopularStreamCard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        var channel = this.props.channel;\r\n\r\n        return(\r\n            <div className=\"col-md-3\" style={{ marginBottom:'1em' }}>\r\n                <Card>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            style = {{ height: 0, paddingTop: '56%'}}\r\n                            image={channel.thumbnail_url}\r\n                            title={channel.user_name}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                {channel.user_name}\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" component=\"h3\">\r\n                                {channel.gameName}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {channel.viewer_count} live viewers\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\">\r\n                            <a className=\"link\" className=\"card-link\" href={\"https://twitch.tv/\" + channel.user_name} target=\"_blank\">\r\n                                Watch {channel.user_name}'s channel\r\n                            </a>\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopularStreamCard;","import React, { useEffect, useState } from 'react';\r\nimport api from '../api';\r\nimport PopularStreamCard from './PopularStreamCard';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Streams(){\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await api.get('https://api.twitch.tv/helix/streams');\r\n            let dataArray = result.data.data;\r\n            let gameIDs = dataArray.map(streams => {\r\n                return streams.game_id;\r\n            });\r\n\r\n            let baseURL = 'https://api.twitch.tv/helix/games?'\r\n            let queryParams = '';\r\n            gameIDs.map(id => {\r\n                return queryParams = queryParams + `id=${id}&`\r\n            })\r\n\r\n            let finalURL = baseURL + queryParams;\r\n            let gameNames = await api.get(finalURL);\r\n            let gameNameArray = gameNames.data.data;\r\n\r\n            let finalArray = dataArray.map(stream => {\r\n                stream.gameName = '';\r\n                gameNameArray.map(name => {\r\n                    if(stream.game_id === name.id){\r\n                        return stream.gameName = name.name\r\n                    }\r\n                })\r\n\r\n                let newURL = stream.thumbnail_url.replace(\"{width}\", \"500\").replace(\"{height}\", \"500\");\r\n                stream.thumbnail_url = newURL;\r\n                return stream;\r\n            })\r\n\r\n            setChannels(finalArray);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    //If the data has not yet been fetched, we show a loading spinner\r\n    if(channels.length == 0){\r\n        return (\r\n            <div>\r\n                <h1 className=\"games-header\">Most Popular Streamers</h1>\r\n                <div className=\"spinner\">\r\n                    <CircularProgress />\r\n                </div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div>\r\n                <h1 className=\"games-header\">Most Popular Streamers</h1>\r\n                <div className=\"row p-5\">\r\n                    {channels.map(channel => (\r\n                        <PopularStreamCard key={channel.id} channel={channel} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Streams;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass StreamCard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        var stream = this.props.stream;\r\n\r\n        return(\r\n            <div className=\"col-md-3\" style={{ marginBottom:'1em' }}>\r\n                <Card>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            style = {{ height: 0, paddingTop: '56%'}}\r\n                            image={stream.thumbnail_url}\r\n                            title={stream.user_name}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {stream.user_name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {stream.viewer_count.toLocaleString()} live viewers\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\">\r\n                        <a className=\"link\" className=\"card-link\" rel=\"noopener noreferrer\" href={\"https://twitch.tv/\" + stream.user_name} target=\"_blank\" >\r\n                            Watch {stream.user_name}'s channel\r\n                        </a>\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StreamCard;","import React, { useState, useEffect } from 'react';\r\nimport api from '../api';\r\nimport StreamCard from './StreamCard';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction GameStreams({match, location}){\r\n    const [streamData, setStreamData] = useState([]);\r\n    const [viewers, setViewers] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await api.get(`https://api.twitch.tv/helix/streams?game_id=${location.state.gameID}`)\r\n            let dataArray = result.data.data;\r\n            let finalArray = dataArray.map(stream => {\r\n                let newURL = stream.thumbnail_url.replace('{width}', '500').replace('{height}', '500');\r\n                stream.thumbnail_url = newURL;\r\n                return stream;\r\n            });\r\n\r\n            //We loop the array adding all the viewers of each stream\r\n            //To get the total viewers of a certain game\r\n            let totalViewers = finalArray.reduce((acc, val) => {\r\n                return acc + val.viewer_count;\r\n            }, 0);\r\n\r\n            setViewers(totalViewers.toLocaleString());\r\n            setStreamData(finalArray);\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if(streamData.length == 0){\r\n        return (\r\n            <div>\r\n                <h1 className=\"games-header\">Most watched games right now</h1>\r\n                <div className=\"spinner\">\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div>\r\n                <h1 className=\"text-center mt-4\">{match.params.id} Streams</h1>\r\n                <h3 className=\"text-center\">\r\n                    <strong className=\"text-primary\">{viewers}</strong> people watching {match.params.id}\r\n                </h3>\r\n                <div className=\"row p-5\">\r\n                    {streamData.map(stream => (\r\n                        <StreamCard key={stream.id} stream={stream} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameStreams;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar style={{ backgroundColor:'#009688' }} position=\"static\">\r\n                <Toolbar>\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    TwitchTV Pro Dashboard\r\n                </Typography>\r\n                <div>\r\n                    <Button variant=\"contained\" className={classes.button} style={{ marginLeft: '1em'}}>\r\n                        <Link to=\"/\" className=\"card-link\">Top Games</Link>\r\n                    </Button>\r\n\r\n                    <Button variant=\"contained\" className={classes.button} style={{ marginLeft: '1em'}}>\r\n                        <Link to=\"/top-streams\" className=\"card-link\">Top Live Streams</Link>\r\n                    </Button>\r\n                </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      width: theme.spacing(7),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 7),\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: 120,\r\n        '&:focus': {\r\n          width: 200,\r\n        },\r\n      },\r\n    },\r\n}));\r\n\r\nexport default Header;","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Games from './components/Games';\nimport Streams from './components/Streams';\nimport GameStreams from './components/GameStreams';\nimport Header from './components/Header';\nimport './App.css';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Header />\n        <Route exact path='/' component={Games} />\n        <Route exact path='/top-streams' component={Streams} />\n        <Route exact path='/games/:id' component={GameStreams} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}